## Log levels for each component
# RUST_LOG="ruspk=info,actix_web=info,actix_server=info"
## Or generic
RUST_LOG="info"
## For web server logs set one of
# RUST_LOG="info"
# RUST_LOG="actix_web=info"
## For verbose logs
# RUST_LOG="trace"

## Database connection (required)
# DATABASE_URL=file:db/database.sqlite
# DATABASE_URL=mysql://ruspk:ruspk@localhost/ruspk
# DATABASE_URL=postgresql://ruspk:ruspk@localhost/ruspk

## IP address to Bind to and listen for connections
## defaults to 127.0.0.1
LISTEN=0.0.0.0

## Port to Bind to and listen for connections
## defaults to 8080
PORT=80

## TLS
TLS_CERT=server/cert.pem
TLS_KEY=server/key.pem

## URL to prepend for spk archive, icon and screenshot files
URL=https://packages.synocommunity.com

## Public key to advertise for signed packages
PGP_KEY_PATH=pgpkey.pem
GNUPG_TIMESTAMP_URL="http://timestamp.synology.com/timestamp.php"

## Used to create API JWT tokens. Both options are optional
## Defaults to new random 64 length secret on server start
## RFC 7518 (JSON Web Algorithms) states that "A key of the same size as the hash
## output (for instance, 256 bits for "HS256", so 64 characters) or larger MUST be used with this
## algorithm." source: https://owasp.org/www-chapter-vancouver/assets/presentations/2020-01_Attacking_and_Securing_JWT.pdf
# JWT_SECRET=super_secret_please_change_me
## Defaults to 24 hours
JWT_EXPIRATION_HOURS=24

## Time in seconds to allow stale responses to be served from memory cache
## defaults to 600
CACHE_TTL=600

## Place to store spk files
## Filesystem
STORAGE_TYPE=filesystem
STORAGE_PATH=packages
## S3 (An Idea, Not Supported Yet)
# STORAGE_TYPE=s3
# STORAGE_HOSTNAME=example.com
# STORAGE_PORT=443
# STORAGE_PASSWORD=
## FTP (An Idea, Not Supported Yet)
# STORAGE_TYPE=ftp
# STORAGE_HOSTNAME=example.com
# STORAGE_PORT=22
# STORAGE_USERNAME=
# STORAGE_PASSWORD=

## Grab all files and json to create a mirror (An Idea, Not Supported Yet)
## This is the PackageCenter API endpoint to copy/query from periodically
## Caveat: Make sure your Frameworks and Architectures are up-to-date and seeded into your database as this is what we would use to query the master
## PULL from master
MIRROR=https://packages.synocommunity.com

## Alternative design would PUSH new packages to mirrors
# Caveat: this has the problem that if a push is missed (server temporarily offline etc.) we would need to find the difference in state
